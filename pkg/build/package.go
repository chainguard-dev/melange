// Copyright 2022 Chainguard, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package build

import (
	"bytes"
	"crypto/sha1"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"text/template"

	apkofs "chainguard.dev/apko/pkg/fs"
	"chainguard.dev/apko/pkg/tarball"
	"chainguard.dev/melange/internal/sign"
	"github.com/psanford/memfs"
)

type PackageContext struct {
	Context       *Context
	Origin        *Package
	PackageName   string
	InstalledSize int64
	DataHash      string
}

func (pkg *Package) Emit(ctx *PipelineContext) error {
	fakesp := Subpackage{
		Name: pkg.Name,
	}
	return fakesp.Emit(ctx)
}

func (spkg *Subpackage) Emit(ctx *PipelineContext) error {
	pc := PackageContext{
		Context:     ctx.Context,
		Origin:      &ctx.Context.Configuration.Package,
		PackageName: spkg.Name,
	}
	return pc.EmitPackage()
}

func (pc *PackageContext) Identity() string {
	return fmt.Sprintf("%s-%s-r%d", pc.PackageName, pc.Origin.Version, pc.Origin.Epoch)
}

func (pc *PackageContext) Filename() string {
	return fmt.Sprintf("%s.apk", pc.Identity())
}

func (pc *PackageContext) WorkspaceSubdir() string {
	return filepath.Join(pc.Context.WorkspaceDir, "melange-out", pc.PackageName)
}

var controlTemplate = `
# Generated by melange.
pkgname = {{.PackageName}}
pkgver = {{.Origin.Version}}-r{{.Origin.Epoch}}
arch = x86_64
size = {{.InstalledSize}}
pkgdesc = {{.Origin.Description}}
{{- range $copyright := .Origin.Copyright }}
license = {{ $copyright.License }}
{{- end }}
{{- range $dep := .Origin.Dependencies.Runtime }}
depend = {{ $dep }}
{{- end }}
datahash = {{.DataHash}}
`

func (pc *PackageContext) GenerateControlData(w io.Writer) error {
	tmpl := template.New("control")
	return template.Must(tmpl.Parse(controlTemplate)).Execute(w, pc)
}

func (pc *PackageContext) SignatureName() string {
	return fmt.Sprintf(".SIGN.RSA.%s.pub", filepath.Base(pc.Context.SigningKey))
}

func combine(out io.Writer, inputs ...io.Reader) error {
	for _, input := range inputs {
		if _, err := io.Copy(out, input); err != nil {
			return err
		}
	}

	return nil
}

// TODO(kaniini): generate APKv3 packages
func (pc *PackageContext) EmitPackage() error {
	log.Printf("generating package %s", pc.Identity())

	tarctx, err := tarball.NewContext(
		tarball.WithSourceDateEpoch(pc.Context.SourceDateEpoch),
		tarball.WithOverrideUIDGID(0, 0),
		tarball.WithOverrideUname("root"),
		tarball.WithOverrideGname("root"),
		tarball.WithUseChecksums(true),
	)
	if err != nil {
		return fmt.Errorf("unable to build tarball context: %w", err)
	}

	fsys := os.DirFS(pc.WorkspaceSubdir())
	if err := fs.WalkDir(fsys, ".", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		fi, err := d.Info()
		if err != nil {
			return err
		}

		pc.InstalledSize += fi.Size()
		return nil
	}); err != nil {
		return fmt.Errorf("unable to preprocess package data: %w", err)
	}

	// TODO(kaniini): generate so:/cmd: virtuals for the filesystem
	// prepare data.tar.gz
	dataDigest := sha256.New()
	if err := tarctx.WriteArchive(dataDigest, apkofs.DirFS(pc.WorkspaceSubdir())); err != nil {
		return fmt.Errorf("unable to write data tarball: %w", err)
	}

	pc.DataHash = hex.EncodeToString(dataDigest.Sum(nil))
	log.Printf("  data.tar.gz installed-size: %d", pc.InstalledSize)
	log.Printf("  data.tar.gz digest: %s", pc.DataHash)

	// prepare control.tar.gz
	multitarctx, err := tarball.NewContext(
		tarball.WithSourceDateEpoch(pc.Context.SourceDateEpoch),
		tarball.WithOverrideUIDGID(0, 0),
		tarball.WithOverrideUname("root"),
		tarball.WithOverrideGname("root"),
		tarball.WithSkipClose(true),
	)
	if err != nil {
		return fmt.Errorf("unable to build tarball context: %w", err)
	}

	var controlBuf bytes.Buffer
	if err := pc.GenerateControlData(&controlBuf); err != nil {
		return fmt.Errorf("unable to process control template: %w", err)
	}

	controlFS := memfs.New()
	if err := controlFS.WriteFile(".PKGINFO", controlBuf.Bytes(), 0644); err != nil {
		return fmt.Errorf("unable to build control FS: %w", err)
	}

	controlDigest := sha1.New() // nolint:gosec
	if err := multitarctx.WriteArchive(controlDigest, controlFS); err != nil {
		return fmt.Errorf("unable to write control tarball: %w", err)
	}

	controlHash := hex.EncodeToString(controlDigest.Sum(nil))
	log.Printf("  control.tar.gz digest: %s", controlHash)

	// build the final tarball
	outFile, err := os.Create(pc.Filename())
	if err != nil {
		return fmt.Errorf("unable to create apk file: %w", err)
	}
	defer outFile.Close()

	mtar := tarball.Out(outFile)

	if pc.Context.SigningKey != "" {
		signatureFS := memfs.New()
		signatureBuf, err := sign.RSASignSHA1Digest(controlDigest.Sum(nil),
			pc.Context.SigningKey, pc.Context.SigningPassphrase)
		if err != nil {
			return fmt.Errorf("unable to generate signature: %w", err)
		}

		if err := signatureFS.WriteFile(pc.SignatureName(), signatureBuf, 0644); err != nil {
			return fmt.Errorf("unable to build signature FS: %w", err)
		}

		if err := mtar.Append(multitarctx, signatureFS); err != nil {
			return fmt.Errorf("unable to write signature tarball: %w", err)
		}
	}

	if err := mtar.Append(multitarctx, controlFS); err != nil {
		return fmt.Errorf("unable to write control tarball: %w", err)
	}

	if err := mtar.Append(tarctx, apkofs.DirFS(pc.WorkspaceSubdir())); err != nil {
		return fmt.Errorf("unable to write data tarball: %w", err)
	}

	mtar.Close()

	log.Printf("wrote %s", outFile.Name())

	return nil
}
