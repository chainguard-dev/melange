name: Run a build using the go compiler

needs:
  packages:
    - ${{inputs.go-package}}
    - busybox
    - ca-certificates-bundle

inputs:
  go-package:
    description: |
      The go package to install
    default: go

  packages:
    description: |
      List of space-separated packages to compile. Files con also be specified.
      This value is passed as an argument to go build. All paths are relative
      to inputs.modroot.
    required: true

  tags:
    description: |
      A comma-separated list of build tags to append to the go compiler

  toolchaintags:
    description: |
      A comma-separated list of default toolchain go build tags
    default: "netgo,osusergo"

  output:
    description: |
      Filename to use when writing the binary. The final install location inside
      the apk will be in prefix / install-dir / output
    required: true

  vendor:
    description: |
      If true, the go mod command will also update the vendor directory
    default: "false"

  modroot:
    default: "."
    required: false
    description: |
      Top directory of the go module, this is where go.mod lives. Before buiding
      the go pipeline wil cd into this directory.

  prefix:
    description: |
      Prefix to relocate binaries
    default: usr

  ldflags:
    description:
      List of [pattern=]arg to append to the go compiler with -ldflags

  strip:
    description:
      Set of strip ldflags passed to the go compiler
    # Note symbols tables are useful for cryptography audits and govulncheck
    default: "-w"

  install-dir:
    description: |
      Directory where binaries will be installed
    default: bin

  deps:
    description: |
      space separated list of go modules to update before building. example: github.com/foo/bar@v1.2.3

  experiments:
    description: |
      A comma-separated list of Golang experiment names (ex: loopvar) to use
      when building the binary.
    default: ""

  extra-args:
    description: |
      A space-separated list of extra arguments to pass to the go build command.
    default: ""

  amd64:
    description: |
      GOAMD64 microarchitecture level to use
    default: "v2"

  arm64:
    description: |
      GOARM64 microarchitecture level to use
    default: "v8.0"

  buildmode:
    description: |
      The -buildmode flag value. See "go help buildmode" for more information.
    default: "default"

  tidy:
    description: |
      If true, "go mod tidy" will run before the build
    default: "false"

pipeline:
  - runs: |
      cd "${{inputs.modroot}}"

      # check if modroot is set correctly by checking go.mod file exist
      if [ ! -e go.mod ]; then
        echo "go.mod not found in ${{inputs.modroot}}"
        exit 1
      fi

      "${{inputs.tidy}}" && go mod tidy

      LDFLAGS="${{inputs.strip}} ${{inputs.ldflags}}"

      BASE_PATH="${{inputs.prefix}}/${{inputs.install-dir}}/${{inputs.output}}"

      # Take advantage of melange's buid cache for downloaded modules
      export GOMODCACHE=/var/cache/melange/gomodcache

      # Install any specified dependencies
      if [ ! "${{inputs.deps}}" == "" ]; then
        for dep in ${{inputs.deps}}; do
          go get $dep
        done
        go mod tidy
        # If vendor is specified, update the vendor directory
        "${{inputs.vendor}}" && go mod vendor
      fi

      # Install go mod overlay if it exists.
      [ -e /home/build/go.mod.local ] && cp /home/build/go.mod.local go.mod
      [ -e /home/build/go.sum.local ] && cp /home/build/go.sum.local go.sum

      GOAMD64="${{inputs.amd64}}" GOARM64="${{inputs.arm64}}" GOEXPERIMENT="${{inputs.experiments}}" go build -o "${{targets.contextdir}}"/${BASE_PATH} -tags "${{inputs.toolchaintags}},${{inputs.tags}}" -ldflags "${LDFLAGS}" -trimpath -buildmode ${{inputs.buildmode}} ${{inputs.extra-args}} ${{inputs.packages}}
