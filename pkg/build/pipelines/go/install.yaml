name: Run a build using the go compiler

needs:
  packages:
    - ${{inputs.go-package}}
    - busybox
    - ca-certificates-bundle
    - git

inputs:
  go-package:
    description: |
      The go package to install
    default: go

  package:
    description: |
      Import path to the package
    required: true

  version:
    description: |
      Package version to install. This can be a version tag (v1.0.0), a
      commit hash or another ref (eg latest or HEAD).

  prefix:
    description: |
      Prefix to relocate binaries
    default: usr

  install-dir:
    description: |
      Directory where binaries will be installed
    default: bin

  ldflags:
    description:
      List of [pattern=]arg to pass to the go compiler with -ldflags

  tags:
    description: |
      A comma-separated list of build tags to pass to the go compiler

  experiments:
    description: |
      A comma-separated list of Golang experiment names (ex: loopvar) to use
      when building the binary.
    default: ""

  amd64:
    description: |
      GOAMD64 microarchitecture level to use
    default: "v2"

  arm64:
    description: |
      GOARM64 microarchitecture level to use
    default: "v8.0"

pipeline:
  - runs: |
      TAGS=""
      LDFLAGS=""
      VERSION=""

      # Installed binaries will be stored in a tmp dir
      export GOBIN=$(mktemp -d)

      if [ ! "${{inputs.tags}}" == "" ]; then
        TAGS="${{inputs.tags}}"
      fi

      if [ ! "${{inputs.ldflags}}" == "" ]; then
        LDFLAGS="${{inputs.ldflags}}"
      fi

      if [ ! "${{inputs.version}}" == "" ]; then
        VERSION="@${{inputs.version}}"
      fi


      # Run go install
      GOAMD64="${{inputs.amd64}}" GOARM64="${{inputs.arm64}}" "GOEXPERIMENT="${{inputs.experiments}}" go install ${DEST_PATH} -tags "${TAGS}" -ldflags "${LDFLAGS}" ${{inputs.package}}${VERSION}
      mkdir -p ${{targets.contextdir}}/${{inputs.prefix}}/${{inputs.install-dir}}

      # Move all resulting files to the target dir
      echo "go/install: Installing built binaries"
      for f in $(ls ${GOBIN})
      do
        mv -v ${GOBIN}/${f} ${{targets.contextdir}}/${{inputs.prefix}}/${{inputs.install-dir}}/${f}
      done
