name: Fetch and extract external object into workspace

needs:
  packages:
    - wget

inputs:
  strip-components:
    description: |
      The number of path components to strip while extracting.
    default: 1

  extract:
    description: |
      Whether to extract the downloaded artifact as a source tarball.
    default: true

  expected-sha256:
    description: |
      The expected SHA256 of the downloaded artifact.

  expected-sha512:
    description: |
      The expected SHA512 of the downloaded artifact.

  purl-name:
    description: |
      package-URL (PURL) name for use in SPDX SBOM External References
    default: ${{package.name}}

  purl-version:
    description: |
      package-URL (PURL) version for use in SPDX SBOM External References
    default: ${{package.version}}

  uri:
    description: |
      The URI to fetch as an artifact.
    required: true

  timeout:
    description: |
      The timeout (in seconds) to use for connecting and reading.
      The fetch will fail if the timeout is hit.
    default: 5

  dns-timeout:
    description: |
      The timeout (in seconds) to use for DNS lookups.
      The fetch will fail if the timeout is hit.
    default: 20

  retry-limit:
    description: |
      The number of times to retry fetching before failing.
    default: 5

  delete:
    description: |
      Whether to delete the fetched artifact after unpacking.
    default: false

pipeline:
  - runs: |
      if [ "${{inputs.expected-sha256}}" == "" ] && [ "${{inputs.expected-sha512}}" == "" ]; then
        printf "One of expected-sha256 or expected-sha512 is required"
        exit 1
      fi

      bn=$(basename ${{inputs.uri}})

      if [ ! "${{inputs.expected-sha256}}" == "" ]; then
        fn="/var/cache/melange/sha256:${{inputs.expected-sha256}}"
        if [ -f $fn ]; then
          printf "fetch: found $fn in cache\n"
          cp $fn $bn
        fi
      else
        fn="/var/cache/melange/sha512:${{inputs.expected-sha512}}"
        if [ -f $fn ]; then
          printf "fetch: found $fn in cache\n"
          cp $fn $bn
        fi
      fi

      if [ ! -f $bn ]; then
        wget '-T${{inputs.timeout}}' '--dns-timeout=${{inputs.dns-timeout}}' '--tries=${{inputs.retry-limit}}' --random-wait --retry-connrefused --continue '${{inputs.uri}}'
      fi

      if [ "${{inputs.expected-sha256}}" != "" ]; then
        printf "fetch: Expected sha256: ${{inputs.expected-sha256}}\n"
        sum=$(sha256sum $bn | awk '{print $1}')
        if [ "${{inputs.expected-sha256}}" != "$sum" ]; then
          printf "fetch: Expected sha256 does not match found: $sum\n"
          exit 1
        fi
      else
        printf "fetch: Expected sha512: ${{inputs.expected-sha512}}\n"
        sum=$(sha512sum $bn | awk '{print $1}')
        if [ "${{inputs.expected-sha512}}" != "$sum" ]; then
          printf "fetch: Expected sha512 does not match found: $sum\n"
          exit 1
        fi
      fi

      if [ "${{inputs.extract}}" = "true" ]; then
        tar -x '--strip-components=${{inputs.strip-components}}' -f $bn
      fi

      if [ "${{inputs.delete}}" = "true" ]; then
        rm $bn
      fi
